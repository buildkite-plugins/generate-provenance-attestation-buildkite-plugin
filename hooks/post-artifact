#!/usr/bin/env bash

# `set -x` if DEBUG_PUBLISH_TO_PACKAGES environment variable is set 
# to anything at all. e.g. DEBUG_PUBLISH_TO_PACKAGES=1
# Do this before `set -u` to avoid unbound variable error.
if [[ -n "${DEBUG_GENERATE_PROVENANCE_ATTESTATION}" ]]; then
  set -x # Print all executed commands to the terminal for debugging
fi

set -e            # Immediately exit if any command has a non-zero exit status
set -u            # Immediately exit if a reference is made to an unbound variable
set -o pipefail   # Pipeline ("|") uses exit status of the first failed command

SCRIPT_DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"

# shellcheck source=lib/plugin.bash
. "$SCRIPT_DIR/../lib/plugin.bash"

PLUGIN_VERSION=$(cat "${SCRIPT_DIR}/../VERSION")

ARTIFACTS="$(plugin_read_config ARTIFACTS "")"
ATTESTATION_NAME="$(plugin_read_config ATTESTATION_NAME "")"

echo "~~~ üîè [GPA] Generate Provenance Attestation"

TMP_DIR=$(mktemp -d)
ATTESTATION_DIR="${TMP_DIR}/attestation"
ATTESTATION_FILE="${ATTESTATION_DIR}/${ATTESTATION_NAME}"

mkdir -p "${ATTESTATION_DIR}"

echo "~~~ üîè [GPA] Generate"

python3 "${SCRIPT_DIR}/../main.py" \
  --artifacts-glob "${ARTIFACTS}" \
  --output "${ATTESTATION_FILE}" \
  --plugin-version "${PLUGIN_VERSION}"

echo "~~~ üîè [GPA] Upload"

cd "${ATTESTATION_DIR}"
buildkite-agent artifact upload "*"

echo "~~~ üîè [GPA] Preview Envelope"

jq < "${ATTESTATION_FILE}"

echo "~~~ üîè [GPA] Preview Statement"

jq -r '.payload' < "${ATTESTATION_FILE}" | base64 -d | jq

echo "~~~ üîè [GPA] Clean up"
rm -rf "${TMP_DIR}"
